name: Deploy Application

on:
  push:
    branches: [main, staging, develop]
    paths-ignore:
      - "terraform/**"
      - .github/workflows/terraform.yml
      - README.md
      - LICENSE
  pull_request:
    branches: [main, staging, develop]
    paths-ignore:
      - "terraform/**"
      - .github/workflows/terraform.yml
      - README.md
      - LICENSE

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com

jobs:
  test:
    name: "Test & Lint"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Run tests
        run: npm run test

  build-and-push:
    name: "Build & Push Docker Image"
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload build artifacts to S3
        run: |
          # Create a zip file with the application code
          zip -r app-${GITHUB_SHA}.zip . -x "terraform/*" "node_modules/*" ".git/*" "*.md"

          # Upload to S3
          aws s3 cp app-${GITHUB_SHA}.zip s3://${{ github.ref == 'refs/heads/main' && 'myapp-prod-artifacts' || github.ref == 'refs/heads/staging' && 'myapp-staging-artifacts' || 'myapp-dev-artifacts' }}-$(date +%s)/app-${GITHUB_SHA}.zip

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Service
        run: |
          # Get the ECS cluster and service names
          CLUSTER_NAME="${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}"
          SERVICE_NAME="${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}"

          # Force new deployment
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          CLUSTER_NAME="${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}"
          SERVICE_NAME="${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}"

          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME

      - name: Get Load Balancer URL
        id: get-alb-url
        run: |
          # Get the ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names "${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "url=http://$ALB_DNS" >> $GITHUB_OUTPUT
          echo "Application URL: http://$ALB_DNS"

      - name: Health Check
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names "${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "Performing health check on http://$ALB_DNS/health"

          # Wait for the service to be ready
          for i in {1..30}; do
            if curl -f http://$ALB_DNS/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Waiting for service to be ready... (attempt $i/30)"
              sleep 10
            fi
          done

      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || github.ref == 'refs/heads/staging' && 'Staging' || 'Development' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build-and-push.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.get-alb-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Cluster:** ${{ github.ref == 'refs/heads/main' && 'myapp-prod' || github.ref == 'refs/heads/staging' && 'myapp-staging' || 'myapp-dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
