name: Terraform Infrastructure

on:
  push:
    branches: [develop]
    paths:
      - "terraform/**"
      - .github/workflows/terraform.yml
  pull_request:
    branches: [develop]
    paths:
      - "terraform/**"
      - .github/workflows/terraform.yml
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy
        required: true
        default: dev
        type: choice
        options:
          - dev
      action:
        description: Action to perform
        required: true
        default: plan
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: 1.6.0
  AWS_REGION: ap-south-1

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: development

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      - name: Terraform Init
        id: init
        run: |
          terraform init -backend-config="key=${{ steps.env.outputs.environment }}/terraform.tfstate"
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file="environments/${{ steps.env.outputs.environment }}/terraform.tfvars" -out=tfplan
        working-directory: ./terraform

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        run: |
          terraform init -backend-config="key=${{ steps.env.outputs.environment }}/terraform.tfstate"
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.event.inputs.action != 'destroy'
        run: |
          terraform apply -var-file="environments/${{ steps.env.outputs.environment }}/terraform.tfvars" -auto-approve
        working-directory: ./terraform

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy -var-file="environments/${{ steps.env.outputs.environment }}/terraform.tfvars" -auto-approve
        working-directory: ./terraform

      - name: Output Infrastructure Info
        if: github.event.inputs.action != 'destroy'
        run: |
          echo "## Infrastructure Deployment Complete üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "AWS Region: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "Terraform Version: ${{ env.TF_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Push your application code to trigger deployment" >> $GITHUB_STEP_SUMMARY
          echo "2. Check the Actions tab for deployment status" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor your application in AWS Console" >> $GITHUB_STEP_SUMMARY
